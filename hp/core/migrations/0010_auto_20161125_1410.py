# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-25 14:10
from __future__ import unicode_literals

from django.db import migrations

from core.constants import TARGET_MODEL


def migrate_data(apps, schema_editor):
    ContentType = apps.get_model('contenttypes', 'ContentType')
    OldPage = apps.get_model('core', 'Page')
    OldPost = apps.get_model('core', 'BlogPost')
    MenuItem = apps.get_model('core', 'MenuItem')
    Page = apps.get_model('blog', 'Page')
    Post = apps.get_model('blog', 'BlogPost')

    OldPageCT = ContentType.objects.get_for_model(OldPage)
    OldPostCT = ContentType.objects.get_for_model(OldPost)
    PageCT = ContentType.objects.get_for_model(Page)
    PostCT = ContentType.objects.get_for_model(Post)

    def update_common_fields(new, old):
        for field in ['author', 'published', ]:
            setattr(new, field, getattr(old, field))

        for field in ['title', 'text', 'slug', 'meta_summary',
                      'twitter_summary', 'opengraph_summary', 'html_summary']:
            for lang in ['de', 'en', ]:
                field_name = '%s_%s' % (field, lang)
                setattr(new, field_name, getattr(old, field_name))

        # disable auto_now(_add) for instance
        f_created = new._meta.get_field('created')
        f_created.auto_now_add = False
        f_updated = new._meta.get_field('updated')
        f_updated.auto_now = False

        new.created = old.created
        new.updated = old.updated

    # migrate pages
    for old in OldPage.objects.all():
        page = Page()
        update_common_fields(page, old)
        page.save()

    # migrate blog posts
    for old in OldPost.objects.all():
        post = Post()
        update_common_fields(post, old)
        post.save()

    for item in MenuItem.objects.all():
        if item.target['typ'] != TARGET_MODEL:
            continue

        if item.target['content_type'] == OldPageCT.id:
            try:
                old_obj = OldPage.objects.get(pk=item.target['object_id'])
            except OldPage.DoesNotExist:
                continue

            obj = Page.objects.get(slug_de=old_obj.slug_de)
            item.target['content_type'] = PageCT.id
            item.target['object_id'] = obj.id
        elif item.target['content_type'] == OldPostCT.id:
            try:
                old_obj = OldPost.objects.get(pk=item.target['object_id'])
            except OldPost.DoesNotExist:
                continue

            obj = Post.objects.get(slug_de=old_obj.slug_de)
            item.target['content_type'] = PostCT.id
            item.target['object_id'] = obj.id
        else:
            raise ValueError(item.target['content_type'])

        item.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0009_auto_20161125_1407'),
        ('blog', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name', ),
    ]

    operations = [
        migrations.RunPython(migrate_data),
    ]
